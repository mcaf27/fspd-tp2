# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import int_pb2 as int__pb2


class IntegrationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Registro = channel.unary_unary(
                '/int.IntegrationService/Registro',
                request_serializer=int__pb2.RegisterRequest.SerializeToString,
                response_deserializer=int__pb2.RegisterResponse.FromString,
                )
        self.Consulta = channel.unary_unary(
                '/int.IntegrationService/Consulta',
                request_serializer=int__pb2.QueryRequest.SerializeToString,
                response_deserializer=int__pb2.QueryResponse.FromString,
                )
        self.Termino = channel.unary_unary(
                '/int.IntegrationService/Termino',
                request_serializer=int__pb2.EmptyRequest.SerializeToString,
                response_deserializer=int__pb2.EndResponse.FromString,
                )


class IntegrationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Registro(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Consulta(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Termino(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IntegrationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Registro': grpc.unary_unary_rpc_method_handler(
                    servicer.Registro,
                    request_deserializer=int__pb2.RegisterRequest.FromString,
                    response_serializer=int__pb2.RegisterResponse.SerializeToString,
            ),
            'Consulta': grpc.unary_unary_rpc_method_handler(
                    servicer.Consulta,
                    request_deserializer=int__pb2.QueryRequest.FromString,
                    response_serializer=int__pb2.QueryResponse.SerializeToString,
            ),
            'Termino': grpc.unary_unary_rpc_method_handler(
                    servicer.Termino,
                    request_deserializer=int__pb2.EmptyRequest.FromString,
                    response_serializer=int__pb2.EndResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'int.IntegrationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IntegrationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Registro(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/int.IntegrationService/Registro',
            int__pb2.RegisterRequest.SerializeToString,
            int__pb2.RegisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Consulta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/int.IntegrationService/Consulta',
            int__pb2.QueryRequest.SerializeToString,
            int__pb2.QueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Termino(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/int.IntegrationService/Termino',
            int__pb2.EmptyRequest.SerializeToString,
            int__pb2.EndResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
